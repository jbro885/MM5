/*
 * Copyright (c) 2003, 2004, 2005
 * The Regents of The University of Michigan
 * All Rights Reserved
 *
 * This code is part of the M5 simulator, developed by Nathan Binkert,
 * Erik Hallnor, Steve Raasch, and Steve Reinhardt, with contributions
 * from Ron Dreslinski, Dave Greene, Lisa Hsu, Kevin Lim, Ali Saidi, 
 * and Andrew Schultz.
 *
 * Permission is granted to use, copy, create derivative works and
 * redistribute this software and such derivative works for any
 * purpose, so long as the copyright notice above, this grant of
 * permission, and the disclaimer below appear in all copies made; and
 * so long as the name of The University of Michigan is not used in
 * any advertising or publicity pertaining to the use or distribution
 * of this software without specific, written prior authorization.
 *
 * THIS SOFTWARE IS PROVIDED AS IS, WITHOUT REPRESENTATION FROM THE
 * UNIVERSITY OF MICHIGAN AS TO ITS FITNESS FOR ANY PURPOSE, AND
 * WITHOUT WARRANTY BY THE UNIVERSITY OF MICHIGAN OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE. THE REGENTS OF THE UNIVERSITY OF MICHIGAN SHALL NOT BE
 * LIABLE FOR ANY DAMAGES, INCLUDING DIRECT, SPECIAL, INDIRECT,
 * INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WITH RESPECT TO ANY CLAIM
 * ARISING OUT OF OR IN CONNECTION WITH THE USE OF THE SOFTWARE, EVEN
 * IF IT HAS BEEN OR IS HEREAFTER ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGES.
 */

// -*- mode:text -*-
/** @page config_files Configuration Files Explained

The simulated system is built from a collection of simulator objects,
or SimObjects.  The configuration file describes the simulated system
by describing the SimObjects to be instantiated, their parameters, and
their relationships.

To provide maximum power and flexibility, configurations are specified
using the Python programming language.  The program contained in the
configuration file is executed to create a hierarchy of Python objects
that mirror the SimObjects to be created for the simulation.

@section classes Python classes

M5 provides a collection of Python object classes that correspond to
its C++ simulation object classes.  These Python classes (along with a
substantial amount of code defining their behavior) are defined in a
Python module called <tt>%m5</tt>.  (The Python class definitions can
be found in the source tree in the <tt>python/m5/objects</tt>
directory.)

The first step in specifying a %SimObject is to instantiate a Python
object of the corresponding class.  To make the Python classes
visible, the configuration file must first import the class
definitions from the <tt>%m5</tt> module as follows:

@verbatim
from m5 import *
@endverbatim

A Python object is instantiated by writing the class name (which, by
our convention, starts with an uppercase letter) followed by a pair of
parentheses.  Thus the following code instantiates a SimpleCPU object
and assigns it to the Python variable <tt>cpu</tt>:

@code
cpu = SimpleCPU()
@endcode

%SimObject parameters are specified using Python attributes (Python
terminology for object fields or members).  These attributes can be
set at any time using direct Python assignments or at instantiation
time using keywords inside the parentheses.  The following
instantiation:

@code
cpu = SimpleCPU(clock = '2GHz', width = 2)
@endcode

is thus equivalent to:

@code
cpu = SimpleCPU()
cpu.clock = '2GHz'
cpu.width = 2
@endcode

Parameter assignments are partially validated at the time the
assignment is performed.  The attribute name (e.g., <tt>clock</tt>)
must be a defined parameter for the %SimObject class, and the
right-hand side of the assignment must be of (or convertible to) the
correct type for that parameter.  The <tt>%m5</tt> module defines a
large number of domain-specific string-to-value conversions, allowing
expressions such as <tt>'2GHz'</tt> and <tt>'64KB'</tt> for clock
rates and memory sizes, respectively.  A complete list of valid units
can be found in <tt>python/m5/convert.py</tt>.

The complete list of parameters for a given %SimObject class (along
with their types, default values, and brief descriptions) can be found
by looking at the files in the <tt>python/m5/objects</tt> directory.
An attribute labeled <tt>Param.X</tt> defines a  parameter of type
<tt>X</tt>, while an attribute labeled <tt>VectorParam.X</tt> defines
a parameter requiring a vector (Python list) whose elements must be of
type <tt>X</tt>.
Note that parameters are inherited: for example, the <tt>clock</tt>
parameter for the %SimpleCPU object above is not specified in the
%SimpleCPU class definition in
<tt>python/m5/objects/SimpleCPU.py</tt>, but is inherited from
%SimpleCPU's Python base class %BaseCPU (specified in
<tt>BaseCPU.py</tt>).

Connections among SimObjects are formed by using a reference to one
%SimObject as a parameter value in the construction of a second
%SimObject.  For example, a CPU's instruction and data caches are
specified by naming cache SimObjects as the values of the CPU's
<tt>icache</tt> and <tt>dcache</tt> parameters, respectively.

@section hierarchy The configuration hierarchy

To simplify the description of large systems, the overall simulation
target specification is organized as a hierarchy (tree).  Each node in
the tree is a %SimObject instance.  Even if a %SimObject is instantiated
in Python, it will not be constructed for the simulation unless it is
part of this hierarchy.  The program must create a special object
<tt>root</tt> of class <tt>Root</tt> to identify the root of the
hierarchy.  When the configuration program completes execution,
the tree rooted at <tt>root</tt> is walked recursively to identify
objects to construct.

Children are added to SimObjects using the same syntax as setting
parameters, i.e., by assigning to Python object attributes.  The
%SimpleCPU object created above can be instantiated by making it a
child of the <tt>root</tt> object as follows:

@code
root = Root()
root.cpu = cpu
@endcode

As with parameters, children can be assigned at instantiation time
using keyword assignment within parentheses.  As a result, the
instantiation of the CPU and attaching it to the root node can be done
in a single line:

@code
root = Root(cpu = SimpleCPU(clock = '2GHz', width = 2))
@endcode

SimObjects may also become children when they are assigned to a
parameter of another %SimObject.  For example, creating a cache object
and assigning it to a CPU's <tt>icache</tt> or <tt>dcache</tt>
parameter makes the cache object a child of the CPU object in the
configuration hierarchy.  This effect only occurs for SimObjects that
are not in the hierarchy; a %SimObject that is already part of the
hierarchy is not re-parented when it is assigned to another
%SimObject's parameter.

The configuration hierarchy determines the final name of each
instantiated object.  The name is formed from the path from
<tt>root</tt> to the particular object (not including <tt>root</tt>
itself), joining elements with '.'.  For example, consider the
following configuration:

@code
my_cpu = SimpleCPU(clock = '2GHz', width = 2)
my_cpu.icache = BaseCache(size = '32KB', assoc = 2)
my_cpu.dcache = BaseCache(size = '64KB', assoc = 2)
my_system = LinuxSystem(cpu = my_cpu)
root = Root(system = my_system)
@endcode

In this case, the resulting SimObjects will have the internal names
<tt>system</tt>, <tt>%system.cpu</tt>, <tt>%system.cpu.icache</tt>, and
<tt>%system.cpu.dcache</tt>.  These names will be used in statistics
output, etc.  The names <tt>my_cpu</tt> and <tt>my_system</tt> are
simply Python variables; they can be used within Python to set
attributes, add children, etc., but they are not visible to the C++
portion of the simulation.  Note that a Python object can be accessed
using its configuration hierarchy path from within Python by
prepending <tt>root.</tt> .

A child attribute can also accept a vector of SimObjects.  As with
vector-valued parameters, these vectors are expressed as Python lists,
for example, <tt>%system.cpu = [ SimpleCPU(), SimpleCPU() ]</tt>.  In
Python, these objects can be accessed using standard list index
notation (e.g., <tt>%system.cpu[0]</tt>).  The internal names for the
objects are formed by directly appending the index to the attribute
name (e.g., <tt>%system.cpu0</tt>).

In detail, the semantics of assigning to %SimObject attributes are as
follows:

<ol>

<li> If the attribute name identifies one of the %SimObject's formal
parameters, then the value on the right-hand side is converted to the
parameter's type.  An error is raised if this conversion cannot be
performed.  If the value is a %SimObject that is not associated with
the configuration hierarchy, that %SimObject also becomes a child of
the %SimObject whose attribute is being assigned.  The parameter name
is used as the final element in the assigned %SimObject's name.

<li> If the attribute name does not correspond to a formal parameter and
the right-hand value is a %SimObject or a list of SimObjects, those
%SimObject(s) become children of the %SimObject whose attribute is
being assigned.  The attribute name is used as the final element in
the assigned %SimObject's name.

<li> If the attribute name does not correspond to a formal parameter and
the right-hand value is not a %SimObject, an error is raised.

</ol>

@section inheritance Inheritance and late binding

%SimObject instances inherit both parameters and values from the
classes they instantiate.  A key feature of the configuration system
is that value inheritance is largely <em>late binding</em>, that is,
values are propagated to instances when the hierarchy is instantiated,
not when the instance is created.  As a result, a value can be set on
a class parameter <em>after</em> instances have been created, and the
instances will receive the more recent parameter value (as long as the
parameter has not been explicitly overridden on those instances).

The following example demonstrates this behavior:

@verbatim
# Instantiate some CPUs.
scpu1 = SimpleCPU()
scpu2 = SimpleCPU()
fcpu1 = FullCPU()
fcpu2 = FullCPU()

# Since BaseCPU is a common base class for SimpleCPU and FullCPU, the
# following statement will cause all of the above CPUs to have a clock
# rate of 1GHz.
BaseCPU.clock = '1GHz' 

# The following statement sets the width of both scpu1 and scpu2 to 4.
SimpleCPU.width = 4

# We can override the clock rate for a specific CPU.  Note that this
# assignment will have the same effect whether it is before or after
# the BaseCPU.clock assignment above.
fcpu2.clock = '2GHz'
@endverbatim

This late-binding behavior is particularly useful when setting Python
variables from the command line (see @ref invocation).  Class-level
variables can be set from the command line after the main
configuration program is executed and they will still take effect.

@section subclasses Subclassing

Users can define new %SimObject classes by deriving from existing M5
classes.  This feature can be useful for providing classes with
differing sets of parameter values.  These subclasses are defined
using standard Python class syntax:

@code
class CrazyFastCPU(FullCPU):
    rob_size = 10000
    width = 100
    clock = '10GHz'
@endcode

Users can also subclass or instantiate the %SimObject class directly,
e.g., <tt>obj = %SimObject()</tt>.  These Python objects will not
generate C++ SimObjects, but can be assigned children.  They can be
useful to create internal nodes in the configuration hierarchy that
represent collections of SimObjects but do not correspond to C++
SimObjects themselves.

@section relative Relative references

In many situations, %SimObject parameters have obvious default values
that cannot be explicitly named in the general case.  For example,
many I/O devices need a pointer to the enclosing system's physical
memory object or to the enclosing system object itself.  Similarly, a
cache's default latency might be expressed most conveniently in terms
of the clock period of the attached CPU.  However, the path names of
those objects will vary from configuration to configuration.  M5's
configuration system solves this problem by providing <em>relative
reference</em> objects.  These are "proxy" objects that stand in for
real objects and are resolved only after the entire hierarchy is
constructed.

The <tt>%m5</tt> module provides two relative reference objects:
<tt>Self</tt> and <tt>Parent</tt>.  An attribute reference relative to
<tt>Self</tt> resolves to the referencing object, while
<tt>Parent</tt> is resolved by iteratively traversing up the hierarchy
(towards <tt>root</tt>), starting at the parent of the referencing
object, until a suitable match is found.  A key feature of these
objects is that resolution is relative to the final referencing object
instance, not where the assignment is performed.  Thus they can be
assigned as default values to parameters in a %SimObject class
definition, and will be resolved independently for each instance that
derives from that class.

For example, it is convenient to set the default clock speed of a CPU
object to be the clock speed of the enclosing system; thus in a
homogenous multiprocessor there is no need to explicitly set the clock
rate on each CPU.  We achieve this by setting the default value for
the CPU's <tt>clock</tt> parameter to be <tt>Parent.clock</tt>.
During the final instantiation phase, an access to the CPU's
<tt>clock</tt> parameter will be resolved by iterating up the
hierarchy, starting at the CPU's parent, until an object with a
<tt>clock</tt> parameter is found.  The value of this parameter (which
will be recursively resolved if it is also a relative reference) will
be assigned to the CPU's <tt>clock</tt> parameter.

For further flexibility, <tt>Self</tt> and <tt>Parent</tt> can take a
special attribute, <tt>any</tt>, which instructs the resolution
mechanism to find any value of the appropriate type, either a
hierarchy node itself or a parameter of a node.  The most common
usage of this feature is to use <tt>Parent.any</tt> for a
%SimObject-valued parameter.  For example, many devices use
<tt>Parent.any</tt> as a default value to locate the enclosing system
object or its physical memory object.  To avoid ambiguity, an error
will be raised if <tt>Parent.any</tt> could resolve to multiple
values at the same level of the hierarchy.

@section invocation Invoking M5

Python configuration code can be specified in three ways on the M5
command line:

<ul>

<li> Arguments ending in '.py' are assumed to be Python files.

<li> The <tt>-P</tt> flag takes a single string argument which is
treated as a line of Python code.

<li> A <tt>--\<variable\>=\<value\></tt> argument is interpreted as a
Python variable assignment.  The value on the right-hand side is
quoted as a Python string and the resulting assignment is passed to
the Python interpreter.

</ul>

M5 invokes a single copy of the Python interpreter,
then passes all of the code indicated on the command line, in the
order specified, to the interpreter.  After all the code has been
executed, the hierarchy indicated by the <tt>root</tt> variable is
instantiated.

*/
